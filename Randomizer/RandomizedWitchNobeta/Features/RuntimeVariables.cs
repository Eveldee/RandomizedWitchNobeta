using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text.Json.Serialization;
using RandomizedWitchNobeta.Config.Serialization;
using RandomizedWitchNobeta.Generation.Models;
using RandomizedWitchNobeta.Shared;
using RandomizedWitchNobeta.Utils.Nobeta;

namespace RandomizedWitchNobeta.Features;

public class RuntimeVariables
{
    public static string SavePath { get; } = Path.Combine(Plugin.ConfigDirectory.FullName, "RuntimeVariables.json");

    public required SeedSettings Settings { get; init; }

    // Timers
    public required TimeSpan ElapsedRealTime { get; set; }
    public required TimeSpan ElapsedLoadRemoved { get; set; }

    // Data used to resume a randomized game
    public required int GlobalMagicLevel { get; set; }

    public required bool CatLootObtained { get; set; }

    public required HashSet<string> KilledBosses { get; init; }
    public required HashSet<string> OpenedTrials { get; init; }

    public required HashSet<string> OpenedChests { get; init; }

    // Generated by the randomizer
    public required int StartScene { get; init; }
    public required Dictionary<RegionExit, (int sceneNumberOverride, int savePointOverride)> ExitsOverrides { get; init; }
    public required Dictionary<ChestOverride, ItemSystem.ItemType> ChestOverrides { get; init; }
    public required ItemSystem.ItemType CatOverride { get; init; }

    [JsonConstructor]
    private RuntimeVariables()
    {

    }

    [SetsRequiredMembers]
    public RuntimeVariables(SeedSettings settings, int startScene, Dictionary<RegionExit, int> exitsOverrides, List<ItemLocation> itemLocations)
    {
        // Default values
        ElapsedRealTime = TimeSpan.Zero;
        ElapsedLoadRemoved = TimeSpan.Zero;
        GlobalMagicLevel = 1;
        CatLootObtained = false;
        KilledBosses = [];
        OpenedTrials = [];
        OpenedChests = [];
        ExitsOverrides = new Dictionary<RegionExit, (int sceneNumberOverride, int savePointOverride)>();
        ChestOverrides = new Dictionary<ChestOverride, ItemSystem.ItemType>();

        // Generate runtime variables from generator output
        Settings = settings;
        StartScene = startScene;

        // Generate exit overrides
        foreach (var (regionExit, destinationScene) in exitsOverrides)
        {
            ExitsOverrides[regionExit] =
                (destinationScene, SceneUtils.SceneStartSavePoint(destinationScene));
        }

        // Generate chest content overrides
        foreach (var chestItemLocation in itemLocations.OfType<ChestItemLocation>())
        {
            ChestOverrides[new ChestOverride(chestItemLocation.ChestName, chestItemLocation.SceneNumber)] = chestItemLocation.ItemType;
        }

        // Get cat item override
        CatOverride = itemLocations.OfType<CatItemLocation>().Single().ItemType;
    }

    public void Save()
    {
        File.WriteAllText(SavePath, SerializeUtils.SerializeIndented(this));
    }

    public static bool TryLoad(out RuntimeVariables runtimeVariables)
    {
        try
        {
            if (!File.Exists(SavePath))
            {
                runtimeVariables = null;
                return false;
            }

            runtimeVariables = SerializeUtils.Deserialize<RuntimeVariables>(File.ReadAllText(SavePath));
        }
        catch (Exception)
        {
            // File is not recoverable, maybe after an update
            runtimeVariables = null;
            return false;
        }

        return true;
    }
}