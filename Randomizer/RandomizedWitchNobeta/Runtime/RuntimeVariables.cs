using System.Collections.Generic;
using System.Linq;
using RandomizedWitchNobeta.Generation;
using RandomizedWitchNobeta.Generation.Models;
using RandomizedWitchNobeta.Utils;

namespace RandomizedWitchNobeta.Runtime;

public class RuntimeVariables
{
    public SeedSettings Settings { get; }

    // Data used to resume a randomized game
    public int GlobalMagicLevel { get; set; } = 1;

    public Dictionary<string, bool> KilledBosses { get; } = new();
    public HashSet<string> OpenedTrials { get; } = new();

    // Generated by the randomizer
    public int StartScene { get; }
    public Dictionary<(int sourceScene, int nextSceneNumber, int nextSavePoint), (int sceneNumberOverride, int savePointOverride)> ExitsOverrides { get; } = new();
    public Dictionary<(string chestName, int sceneNumber), ItemSystem.ItemType> ChestOverrides { get; } = new();
    public ItemSystem.ItemType CatOverride { get; }

    public RuntimeVariables(SeedSettings settings, int startScene, Dictionary<RegionExit, int> exitsOverrides, List<ItemLocation> itemLocations)
    {
        Settings = settings;
        StartScene = startScene;

        // Generate exit overrides
        foreach (var ((sourceScene, nextSceneNumber, nextSavePointNumber), destinationScene) in exitsOverrides)
        {
            ExitsOverrides[(sourceScene, nextSceneNumber, nextSavePointNumber)] =
                (destinationScene, SceneUtils.SceneStartSavePoint(destinationScene));
        }

        // Generate chest content overrides
        foreach (var chestItemLocation in itemLocations.OfType<ChestItemLocation>())
        {
            ChestOverrides[(chestItemLocation.ChestName, chestItemLocation.SceneNumber)] = chestItemLocation.ItemType;
        }

        // Get cat item override
        CatOverride = itemLocations.OfType<CatItemLocation>().Single().ItemType;
    }
}